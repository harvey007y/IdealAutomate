<Page x:Class="Hardcodet.Wpf.Samples.Help.Primitives"
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	Title="Primitives" 
	>
    <FlowDocumentReader ViewingMode="Scroll">
        <FlowDocument FontSize="20">
            <Paragraph>
                <Image Source="/Images/help1.png" Width="190" Height="190" Margin="0,0,30,0" />
                <Run FontSize="30" BaselineAlignment="Center">Primitives</Run>

            </Paragraph>
            <Table CellSpacing="5" BorderThickness="1" BorderBrush="Black">
                <TableRowGroup>
                    <TableRow>
                        <TableCell>
                            <Paragraph>
                                <Image Source="/Images/Primitives.PNG"  Margin="5,5,5,5"  HorizontalAlignment="Center" />
                            </Paragraph>
                        </TableCell>
                    </TableRow>
                </TableRowGroup>
            </Table>

            <Paragraph>
                Scripts consist of a set of actions, and actions are built up out of a verb and one or more entities. Every entity used in your scripts must be defined as one of the following: primitive (string, int, or object), array, image, or expression. The Primitives Tab consists of four columns:
            </Paragraph>
            <Paragraph FontSize="14pt" >
                <Italic>
                    <Bold>
                        1. Name 
                    </Bold>
                </Italic>
            </Paragraph>
            <Paragraph>
                Name is the name that your scripts will use to refer to your primitive data type.
            </Paragraph>
            <Paragraph FontSize="14pt" >
                <Italic>
                    <Bold>
                2. Type
                    </Bold>
                </Italic>
            </Paragraph>
            <Paragraph>
                 Type describes the type of data that your entity will contain.  If it contains numbers, you should define it as int for integer. If it contains characters, it should be defined as string. If the entity is a parent entity that contains child entities, it should be of type object.
            </Paragraph>
            <Paragraph FontSize="14pt" >
                <Italic>
                    <Bold>
                        3. Value
                    </Bold>
                </Italic>
            </Paragraph>
            <Paragraph>
                Value is the the data that you want to put in your entity. If you are going to use the entity to write text to the screen, the application uses a .NET function called SendKeys to send the data to your screen. This means that if you want to have special keys, like the Alt key or Control key, sent to the screen, you often have to use the Keyboard Shortcuts section of this documentation to figure out how to get those keys sent to the screen. If you cannot find how send a particular key or set of keys to the screen, you can google the SendKeys function to find some possibilities. Most of the time, it is more reliable to use a keyboard shortcut than to try to find an image on the screen when you are writing a script.
            </Paragraph>
            <Paragraph FontSize="14pt" >
                <Italic>
                    <Bold>
                        3. Parent
                    </Bold>
                </Italic>
            </Paragraph>
            <Paragraph>
                If you want to group several entities together into a single entity, you can do it by first defining a parent as an object and then by specifying the parent in this column for each child field that you want to be grouped under that parent.
            </Paragraph>


        </FlowDocument>
    </FlowDocumentReader>
</Page>
