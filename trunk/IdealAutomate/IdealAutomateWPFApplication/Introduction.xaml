<UserControl x:Class="Hardcodet.Wpf.Samples.Introduction"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    Height="Auto" Width="Auto">
  <TextBlock TextWrapping="Wrap" 
             Hyperlink.RequestNavigate="OnNavigationRequest">
            
       <Grid Visibility="Visible"
             x:Name="Grid2">
                            <Grid.RowDefinitions>
                                
                                <RowDefinition Height="300" />
                                <RowDefinition Height="60" />
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>

                           
                            <ListBox Grid.Row="0"
                                     Grid.Column="0"
                                     Grid.ColumnSpan="3"
                                     Style="{StaticResource SimpleStyle}"
                                     Height="300"
                                     Width="600px"
                                     Name="lbContent"
                                     VerticalAlignment="Top"
                                     SelectionChanged="lbContent_SelectionChanged"><ListBoxItem Content="IdealAutomate.com"
                                                                                                  IsSelected="True" /></ListBox>
                            
                           
                            <Button Grid.Row="1"
                                    Grid.Column="0"
                                    Height="50"
                                    Width="100"
                                    Name="btnAdd"
                                    VerticalAlignment="Center"
                                    Click="btnAdd_Click">Add</Button>
           <Button Grid.Row="1"
                   Grid.Column="1"
                   Height="50"
                   Width="100"
                   Name="btnDelete"
                   VerticalAlignment="Center"
                   Click="btnDelete_Click">Delete</Button>
           <Button Grid.Row="1"
                   Grid.Column="3"
                   Height="50"
                   Width="100"
                   Name="btnLaunch"
                   VerticalAlignment="Center"
                   Click="btnLaunch_Click">Launch</Button>

                        </Grid> <LineBreak />
          <TextBlock>
            <Bold>Keep the control up-to-date</Bold>
            <LineBreak />
            Make sure you're running the latest version:<LineBreak />
            Check project site for updates: <Hyperlink NavigateUri="http://www.hardcodet.net/2008/01/wpf-treeview/?ref=WpfTreeView">http://www.hardcodet.net</Hyperlink>
            <LineBreak />
            Subscribe to newsletter: <Hyperlink NavigateUri="http://www.hardcodet.net/newsletter/?ref=WpfTreeView">http://www.hardcodet.net/newsletter</Hyperlink>
          </TextBlock>
            
            <LineBreak />
            <LineBreak />
            <Bold>Control Implementation:</Bold><LineBreak />
            The trees  in this sample are <Italic>CategoryTree</Italic>
            controls. <Italic>CategoryTree</Italic> extends the abstract
            <Italic>TreeViewBase</Italic> class and handles items of
            type <Italic>ShopCategory</Italic>.
            If you look at the code in <Italic>CategoryTree.cs</Italic>,
            you'll see that the "implementation" took just 3 lines of code :)
            <LineBreak />
            The advantage is that this control provides a convenient,
            strongly-typed to the tree's data while still fully supporting
            WPF data binding and styling. The clear distinction between
            logical data (the tree's <Italic>Items</Italic> collection)
            and the visual tree (<Italic>TreeViewItem</Italic> nodes),
            eliminates a few shortcomings of the tree, makes it easier to
            handle and simplifies styling of tree nodes remarkably.
            <LineBreak /><LineBreak />
            <Bold>Data Binding:</Bold><LineBreak />
            The tree to the left is data-bound to the <Italic>Categories</Italic>
            property of a <Italic>ShopModel</Italic> class. A <Italic>ShopModel</Italic>
            class has been defined as a resource in <Italic>MainWindow.xaml</Italic>
            <LineBreak />
            The tree to the right is synchronized to the left-hand tree through
            data binding: Both its <Italic>Items</Italic> and
            <Italic>SelectedItem</Italic> properties point to the grid. As
            the <Italic>SelectedItem</Italic> property was declared as
            TwoWay binding, selecting a node in either tree automatically
            changes the selection in the other one.
            <LineBreak />
            While the tree reflects hierachical data, you only bind the
            top level nodes (a flat collection). In this case, this is
            an ObservableCollection that contains the "Books", "Music", and
            "Movies" categories. The tree itself determines its child data
            and creates its sub nodes accordingly.    
            <LineBreak /><LineBreak />
            <Bold>Styling:</Bold><LineBreak />
            The tree nodes of the left-hand tree have been styled by setting
            the control's <Italic>TreeNodeStyle</Italic> dependency property.
            This is a style that targets <Italic>TreeViewItem</Italic>, but
            can also provide a data template for the bound items. See the
            sample style.
            <LineBreak />
            The tree on the left has not been styled explicitely. However,
            there is a <Italic>DataTemplate</Italic> within the tree's
            scope that is automatically picked up. This is the same behaviour
            a standard TreeView control would provide.
            <LineBreak />
            The trees themselves have been styled by setting the
            <Italic>TreeStyle</Italic> property on both controls.
          </TextBlock>
</UserControl>
